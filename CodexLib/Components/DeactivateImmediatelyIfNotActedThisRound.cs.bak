using Kingmaker;
using Kingmaker.Blueprints;
using Kingmaker.EntitySystem.Entities;
using Kingmaker.PubSubSystem;
using Kingmaker.TurnBasedMode.Controllers;
using Kingmaker.UnitLogic;
using Kingmaker.UnitLogic.ActivatableAbilities;
using Kingmaker.UnitLogic.Commands.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TurnBased.Controllers;

namespace CodexLib
{
    [AllowedOn(typeof(BlueprintActivatableAbility), false)]
    public class DeactivateImmediatelyIfNotActedThisRound : UnitFactComponentDelegate
    {
        public bool CanDeactivate(UnitEntityData unit)
        {
            return unit.CombatState.Cooldown.MoveAction <= 0f && unit.CombatState.Cooldown.StandardAction <= 0f;
        }

        public void OnAbilityTurnedOff(ActivatableAbility ability)
        {
            if (this.Owner == null)
                return;

            var currentTurn = Game.Instance.TurnBasedCombatController.CurrentTurn;
            if (!CanDeactivate(this.Owner))
            {
                Helper.PrintDebug("DeactivateImmediatelyIfNotActedThisRound can not deactivate right now");
                return;
            }

            var combatAction = currentTurn.GetActionsStates(this.Owner).Move;
            if (combatAction.PredictedAbility != ability)
            {
                combatAction.ResetActivatableAbility(ability);
                this.Owner.CombatState.Cooldown.MoveAction = 0f;

                EventBus.RaiseEvent<IActionsPredictionHandler>(h => h.PredictionChanged(), true);
                ability.Stop(true);
                return;
            }

            combatAction = currentTurn.GetActionsStates(this.Owner).Standard;
            if (combatAction.PredictedAbility != ability)
            {
                combatAction.ResetActivatableAbility(ability);
                this.Owner.CombatState.Cooldown.StandardAction = 0f;

                EventBus.RaiseEvent<IActionsPredictionHandler>(h => h.PredictionChanged(), true);
                ability.Stop(true);
                return;
            }

            combatAction = currentTurn.GetActionsStates(this.Owner).Swift;
            if (combatAction.PredictedAbility != ability)
            {
                combatAction.ResetActivatableAbility(ability);
                this.Owner.CombatState.Cooldown.SwiftAction = 0f;

                EventBus.RaiseEvent<IActionsPredictionHandler>(h => h.PredictionChanged(), true);
                ability.Stop(true);
                return;
            }

            Helper.PrintDebug("DeactivateImmediatelyIfNotActedThisRound no match");
        }
    }
}
