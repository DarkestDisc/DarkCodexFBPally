<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WinFormProject</name>
    </assembly>
    <members>
        <member name="T:Shared.GlobalHotKeyUI">
            <summary>
            Class to register global hotkey. Works only if thread messages are processed (e.g. WindowsForms).
            </summary>
        </member>
        <member name="F:Shared.GlobalHotKeyUI.WM_HOTKEY">
            <summary>
            Message identifier 0x312 means that the mesage is a WM_HOTKEY message.
            </summary>
        </member>
        <member name="F:Shared.GlobalHotKeyUI.Id">
            <summary>
            A normal application can use any value between 0x0000 and 0xBFFF as the ID
            but if you are writing a DLL, then you must use GlobalAddAtom to get a
            unique identifier for your hot key.
            </summary>
        </member>
        <member name="F:Shared.GlobalHotKeyUI.Handle">
            <summary>
            A handle to the window that will receive WM_HOTKEY messages generated by the hot key.
            </summary>
        </member>
        <member name="E:Shared.GlobalHotKeyUI.HotKeyPressed">
            <summary>
            Raise an event when the hotkey is pressed.
            </summary>
        </member>
        <member name="M:Shared.GlobalHotKeyUI.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Filters out a message before it is dispatched.
            </summary>
        </member>
        <member name="M:Shared.GlobalHotKeyUI.RegisterHotKey(System.IntPtr,System.Int32,Shared.KeyModifiers,System.Windows.Forms.Keys)">
            <summary>
            Define a system-wide hot key.
            </summary>
            <param name="hWnd">
            A handle to the window that will receive WM_HOTKEY messages generated by the
            hot key. If this parameter is NULL, WM_HOTKEY messages are posted to the
            message queue of the calling thread and must be processed in the message loop.
            </param>
            <param name="id">
            The identifier of the hot key. If the hWnd parameter is NULL, then the hot
            key is associated with the current thread rather than with a particular
            window.
            </param>
            <param name="fsModifiers">
            The keys that must be pressed in combination with the key specified by the
            uVirtKey parameter in order to generate the WM_HOTKEY message. The fsModifiers
            parameter can be a combination of the following values.
            MOD_ALT     0x0001
            MOD_CONTROL 0x0002
            MOD_SHIFT   0x0004
            MOD_WIN     0x0008
            </param>
            <param name="vk">The virtual-key code of the hot key.</param>
        </member>
        <member name="M:Shared.GlobalHotKeyUI.UnregisterHotKey(System.IntPtr,System.Int32)">
            <summary>
            Frees a hot key previously registered by the calling thread.
            </summary>
            <param name="hWnd">
            A handle to the window associated with the hot key to be freed. This parameter
            should be NULL if the hot key is not associated with a window.
            </param>
            <param name="id">
            The identifier of the hot key to be freed.
            </param>
        </member>
        <member name="F:Shared.KeyModifiers.Windows">
            <summary>reserved by WINDOWS</summary>
        </member>
        <member name="M:Shared.CollectionHelper.Append``1(``0[],``0[])">
            <summary>Appends objects on array.</summary>
        </member>
        <member name="M:Shared.CollectionHelper.AppendAndReplace``1(``0[]@,``0[])">
            <summary>Appends objects on array and overwrites the original.</summary>
        </member>
        <member name="M:Shared.CollectionHelper.Ensure``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@)">
            <summary>
            Get dictionary by key and create new value with standard constructor, if it did not exist.
            </summary>
            <returns>true if new value was created</returns>
        </member>
        <member name="M:Shared.CollectionHelper.GetList">
            <summary>
            Gets a static list object. Do not save reference.
            Call <b>Flush&lt;T&gt;()</b> to receive output.
            </summary>
        </member>
        <member name="M:Shared.CollectionHelper.Flush``1">
            <summary>
            Use when finished with <b>GetList()</b>
            </summary>
        </member>
        <member name="M:Shared.StringsHelper.JoinArgs(System.String[])">
            <summary>
            Joins an array of arguments into a single string, which can be used for commands.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Shared.StringsHelper.FilterPath(System.String)">
            <summary>
            Converts string into valid absolute path.<br/>
            Returns null, if invalid path (e.g. illegal characters).
            </summary>
        </member>
        <member name="M:Shared.StringsHelper.ExpandWindowsVolume(System.String)">
            <summary>
            Returns to windows style volume expanded string "C:\".
            Otherwise returns input string.
            </summary>
        </member>
        <member name="M:Shared.StringsHelper.PathExists(System.String)">
            <summary>
            Checks for files or directories.
            </summary>
        </member>
        <member name="M:Shared.StringsHelper.GetUniqueFilename(System.String)">
            <summary>
            Returns file path that does not exist. Appends (1) or increases existing numberation, if file already exists.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Shared.StringsHelper.ToLiteral(System.String)" -->
        <member name="M:Shared.StringsHelper.Join``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
             <summary>Joins an enumeration with a value converter and a delimiter to a string</summary>
             <typeparam name="T">The inner type of the enumeration</typeparam>
             <param name="enumeration">The enumeration</param>
             <param name="converter">An optional value converter (from T to string)</param>
             <param name="delimiter">An optional delimiter</param>
             <returns>The values joined into a string</returns>
            
        </member>
        <member name="M:Shared.StringsHelper.TrySubstring(System.String,System.Char,System.Int32,System.Boolean)">
            <summary>Returns substring. Always excludes char 'c'. Returns null, if index is out of range or char not found.</summary>
            <param name="str">source string</param>
            <param name="c">char to search for</param>
            <param name="start">start index; negative number search last index instead</param>
            <param name="tail">get tail instead of head</param>
        </member>
        <member name="T:Shared.StringsHelper.RegexEvaluator">
            <summary>
            Evaluator for Regex.Replace extension.
            </summary>
        </member>
        <member name="M:Shared.StringsHelper.Replace(System.Text.RegularExpressions.Regex,System.String,Shared.StringsHelper.RegexEvaluator)">
            <summary>
            Regex.Replace, but with additional index and count values.
            </summary>
        </member>
        <member name="M:Shared.ConsoleHelper.RunCommand(System.String,System.String,System.String@)">
            <summary>
            Blocking command. Output contains standard output. Returns exit code.
            </summary>
        </member>
        <member name="M:Shared.ConsoleHelper.RunAdmin(System.String)">
            <summary>
            Run the current assembly as admin. Force exists application.
            </summary>
        </member>
        <member name="M:Shared.ConsoleHelper.GetCursorPosition">
            <summary>
            Get current cursor position from console window.
            In .Net 5 > use Console.GetCursorPosition
            </summary>
            <returns>Cursor position</returns>
        </member>
        <member name="M:Shared.ConsoleHelper.GetConsoleInfo">
            <summary>
            Retrieves information about the current screen buffer window
            </summary>
        </member>
        <member name="M:Shared.ConsoleHelper.IndexOfInConsole(System.String)">
            <summary>
            Find text in console window
            </summary>
            <returns>List of found coordinates</returns>
        </member>
        <member name="M:Shared.ConsoleHelper.IndexOfInConsole(System.String[])">
            <summary>
            Find texts in console window
            </summary>
            <param name="text"></param>
            <returns>List of found coordinates</returns>
        </member>
        <member name="M:Shared.ConsoleHelper.GetChar">
            <summary>
            Retrieve character from console window
            </summary>
        </member>
        <member name="M:Shared.ConsoleHelper.GetChar(System.Int32,System.Int32,System.Char@)">
            <summary>
            Retrieve character from console window
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:Shared.ConsoleHelper.GetText(System.Int32)">
            <summary>
            Retrieve text from console window.<br/>
            No length will return until end of line.<br/>
            Length below zero will return until cursor position.
            </summary>
        </member>
        <member name="M:Shared.ConsoleHelper.ReadConsoleOutputCharacterA(System.IntPtr,System.Byte@,System.Int32,Shared.ConsoleHelper.COORD,System.Int32@)">
            <param name="hStdout">result of 'GetStdHandle(-11)'</param>
            <param name="ch">A̲N̲S̲I̲ character result</param>
            <param name="c_in">set to '1'</param>
            <param name="coord_XY"> screen location to read, X:loword, Y:hiword</param>
            <param name="c_out">(unwanted, discard)</param>
            <returns>false if error</returns>
        </member>
        <member name="M:Shared.ConsoleHelper.ReadConsoleOutputCharacterW(System.IntPtr,System.Char@,System.Int32,Shared.ConsoleHelper.COORD,System.Int32@)">
            <param name="hStdout">result of 'GetStdHandle(-11)'</param>
            <param name="ch">U̲n̲i̲c̲o̲d̲e̲ character result</param>
            <param name="c_in">set to 'sizeof(char)'</param>
            <param name="coord_XY">screen location to read, X:loword, Y:hiword</param>
            <param name="c_out">sizeof(char) or 1 if second part of a wide character</param>
            <returns>false if error</returns>
        </member>
        <member name="M:Shared.ConsoleHelper.WriteConsoleOutputCharacterW(System.IntPtr,System.Char,System.Int32,Shared.ConsoleHelper.COORD,System.Int32@)">
            <summary>
            
            </summary>
            <param name="hStdout">result of 'GetStdHandle(-11)'</param>
            <param name="ch">U̲n̲i̲c̲o̲d̲e̲ character to write</param>
            <param name="c_in">set to 'sizeof(char)'</param>
            <param name="coord_XY">screen location to write, X:loword, Y:hiword</param>
            <param name="c_out">returns sizeof(char) if successful</param>
            <returns></returns>
        </member>
        <member name="M:Shared.ConsoleHelper.SetVolumeMountPointW(System.String,System.String)">
            <param name="lpszVolumeMountPoint">Y:\MountX</param>
            <param name="lpszVolumeName">\\?\Volume{00000000-0000-0000-0000-000000000000}\</param>
        </member>
    </members>
</doc>
